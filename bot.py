import logging
import os
import datetime

from random import randint
from aiogram.utils import executor
from aiogram import Bot, Dispatcher, types
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils.markdown import hbold
from dotenv import load_dotenv
from loguru import logger
from models import User

import keyboards
from keyboards import start_keyboard, answers_keyboard
from db_commands import add_user, adding_additional_information, update_question_answer
from form_pdf import forming_test_result_pdf

dotenv_path = os.path.abspath(os.path.join('.env'))
if os.path.exists(dotenv_path):
    load_dotenv(dotenv_path)

logging.basicConfig(level=logging.INFO)
# BOT_API = os.getenv('5481266432:AAFD5JoMTTmfhZrirqLaxK3N4ulFXG2i6F0')
bot = Bot(token='5656589630:AAHhXI2ptopht526dQ3FkYWRJHy4nwMhK-4', parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot, storage=MemoryStorage())

logger.add('logger.log', format='{time} {level} {message}', level='ERROR')


class Question(StatesGroup):
    question_1 = State()
    question_2 = State()
    question_3 = State()
    question_4 = State()
    question_5 = State()
    question_6 = State()
    question_7 = State()
    question_8 = State()
    question_9 = State()
    question_10 = State()
    question_11 = State()
    question_12 = State()
    question_13 = State()
    question_14 = State()
    question_15 = State()
    question_16 = State()
    question_17 = State()
    question_18 = State()
    question_19 = State()
    question_20 = State()
    question_21 = State()
    question_22 = State()
    question_23 = State()
    question_24 = State()


class Welcome(StatesGroup):
    name = State()
    post = State()
    expert = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name
    await add_user(
        user_id=user_id,
        username=username,
        first_name=first_name,
        last_name=last_name
        )
    await message.answer("–ü—Ä–∏–≤–µ—Ç üëãüèª\n"
                         "–Ø - —Ç–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ —É—Å–∫–æ—Ä–µ–Ω–∏–∏ –¥–≤–∏–∂–µ–Ω–∏—è –∫ —Ç–≤–æ–∏–º —Ü–µ–ª—è–º üöÄ\n"
                         "–°–æ –º–Ω–æ–π —Ç—ã —É–∑–Ω–∞—ë—à—å, –∫–∞–∫ –∏–¥—Ç–∏ –∫ —Ü–µ–ª—è–º –∫—Ä–∞—Ç—á–∞–π—à–∏–º –ø—É—Ç—ë–º.\n"
                         "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")

    await Welcome.name.set()


@dp.message_handler(state=Welcome.name)
async def save_name(message: types.Message, state: FSMContext):
    name = message.text
    await state.update_data(name=name)
    await message.answer(f'{name}, –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ!\n\n'
                         f'–ü—Ä–µ–∂–¥–µ, —á–µ–º –º—ã –Ω–∞—á–Ω—ë–º, —Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. '
                         f'–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ –¥–∞—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã üìä\n'
                         f'–ö–∞–∫–∞—è —É —Ç–µ–±—è –¥–æ–ª–∂–Ω–æ—Å—Ç—å?', reply_markup=keyboards.post_keyboard)

    await Welcome.post.set()


@dp.callback_query_handler(state=Welcome.post)
async def save_post(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    data = callback_query.data
    await state.update_data(post=data)
    await callback_query.message.answer('–í —á–µ–º —Ç—ã —ç–∫—Å–ø–µ—Ä—Ç?')

    await Welcome.expert.set()


@dp.message_handler(state=Welcome.expert)
async def save_expert(message: types.Message, state: FSMContext):
    await message.answer('–°–ø–∞—Å–∏–±–æ! –†–∞–¥, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —Ä–∞—Å—Ç–∏ –≤ —Å–≤–æ–µ–π –æ–±–ª–∞—Å—Ç–∏ –±—ã—Å—Ç—Ä–µ–µ üå±\n\n'
                         '–ú–Ω–µ —Ç–æ–∂–µ –µ—Å—Ç—å —á–µ–º –≥–æ—Ä–¥–∏—Ç—å—Å—è!\n'
                         '–ú–µ–Ω—è –ø—Ä–∏–¥—É–º–∞–ª executive-–∫–æ—É—á —É—Ä–æ–≤–Ω—è PCC ICF - –°–æ—Ñ–∏—è –ö—É–∑–∏–Ω–∞.\n\n'
                         'üîπ –°–æ—Ñ–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ—É—á–µ–º –¥–ª—è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –≤ –°–±–µ—Ä–±–∞–Ω–∫–µ\n'
                         'üîπ –í—ã—Å—Ç—É–ø–∞–µ—Ç –≤ –°–∫–æ–ª–∫–æ–≤–æ –∫–∞–∫ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –∫–æ—É—á\n'
                         'üîπ –†–∞–±–æ—Ç–∞–µ—Ç —Å —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è–º–∏ —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º: –°–®–ê, –ê–Ω–≥–ª–∏—è, –ò–∑—Ä–∞–∏–ª—å, –¢–∞–π–ª–∞–Ω–¥ –∏ –¥—Ä\n'
                         'üîπ –°–æ–∑–¥–∞–ª–∞ –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å –Ω–∞ Udemy, –±–æ–ª–µ–µ 14 000 —Å—Ç—É–¥–µ–Ω—Ç–æ–≤\n\n'
                         '–ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –°–æ—Ñ–∏–µ–π –∏ –ø—Ä–æ–π—Ç–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É üìà')

    await message.answer('–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∞–Ω–∞–ª–∏–∑–µ –±–æ–ª–µ–µ 500 –∫–æ—É—á-—Å–µ—Å—Å–∏–π. –ë—ã–ª–æ –≤—ã—è–≤–ª–µ–Ω–æ 8 —Ñ–∞–∫—Ç–æ—Ä–æ–≤ –±—ã—Å—Ç—Ä–æ–≥–æ —Ä–æ—Å—Ç–∞,'
                         ' –∫–æ—Ç–æ—Ä—ã–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä—É—é—Ç—Å—è –≤ —ç—Ç–æ–º —Ç–µ—Å—Ç–µ üìä\n\n'
                         '–¢–µ—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç –∏–∑ 24 –≤–æ–ø—Ä–æ—Å–æ–≤, –∑–∞–π–º—ë—Ç 5-7 –º–∏–Ω—É—Ç. –í –∫–æ–Ω—Ü–µ —Ç–µ—Å—Ç–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å –ø–æ–¥–∞—Ä–æ–∫'
                         ' - —Å—Ç—Ä—É–∫—Ç—É—Ä–Ω—ã–π –æ—Ç—á—ë—Ç –æ —Ç–æ–º, –∫–∞–∫–∏–µ –±–∞—Ä—å–µ—Ä—ã –º–µ—à–∞–µ—Ç —Ç–≤–æ–µ–º—É —Ä–æ—Å—Ç—É –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å üéÅ'
                         ' p.s –æ–±–µ—â–∞—é, –¥–∏–∑–∞–π–Ω —Ç–µ–±—è –ø—Ä–∏—è—Ç–Ω–æ —É–¥–∏–≤–∏—Ç :)\n\n'
                         '–ü—Ä–∏—Å—Ç—É–ø–∏–º?', reply_markup=keyboards.start_keyboard)

    user_id = message.from_user.id
    expert = message.text
    user_data = await state.get_data()
    await adding_additional_information(user_id=user_id, post=user_data["post"], expert=expert)
    await state.finish()


@dp.callback_query_handler(text='start')
async def start(callback_query: types.CallbackQuery):
    await callback_query.message.edit_text(f'{hbold("–í–æ–ø—Ä–æ—Å 1/24")}\n'
                                           f'–ë–ª–∏–∑–∫–∏–µ –º–Ω–µ –ª—é–¥–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–æ–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏'
                                           f' –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å')
    await callback_query.message.edit_reply_markup(reply_markup=answers_keyboard)
    await Question.next()


@dp.callback_query_handler(state=Question.question_1)
async def save_first_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.answer("–¢–µ—Å—Ç –æ—Ç–º–µ–Ω–µ–Ω!\n"
                                            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –µ–≥–æ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µüëá",
                                            reply_markup=start_keyboard)
        await state.finish()
    else:
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        await state.update_data(question_1=int(data))
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 2/24")}\n'
                                            f'–Ø –Ω–∞—Ö–æ–∂—É—Å—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –≥–¥–µ'
                                            f' –±–æ–ª–µ–µ 30% –ª—é–¥–µ–π –¥–æ–±–∏–ª–∏—Å—å –±–æ–ª—å—à–µ–≥–æ —É—Å–ø–µ—Ö–∞, —á–µ–º —è',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_2)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    logger.info(data)
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 1/24")}\n'
                                            f'–ë–ª–∏–∑–∫–∏–µ –º–Ω–µ –ª—é–¥–∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç –º–æ–∏ –Ω–∞—á–∏–Ω–∞–Ω–∏—è –∏'
                                            f' –¥–∞—é—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Ö —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_2=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 3/24")}\n'
                                               f'–ü–æ—Å–ª–µ –æ–±—â–µ–Ω–∏—è —Å –º–æ–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º, —É –º–µ–Ω—è'
                                               f' –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ ',
                                               reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_3)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    if data_2 == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 2/24")}\n'
                                            f'–Ø –Ω–∞—Ö–æ–∂—É—Å—å –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏, –≥–¥–µ'
                                            f' –±–æ–ª–µ–µ 30% –ª—é–¥–µ–π –¥–æ–±–∏–ª–∏—Å—å –±–æ–ª—å—à–µ–≥–æ —É—Å–ø–µ—Ö–∞, —á–µ–º —è',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_3=int(data_2))
        data = await state.get_data()
        average_number = (data["question_1"] + data["question_2"] + data["question_3"]) / 3
        await state.update_data(environment=average_number)
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 4/24")}\n'
                                            f'–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ü–µ–ª—å',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_4)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 3/24")}\n'
                                            f'–ü–æ—Å–ª–µ –æ–±—â–µ–Ω–∏—è —Å –º–æ–∏–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ–º, —É –º–µ–Ω—è'
                                            f' –ø–æ—è–≤–ª—è–µ—Ç—Å—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –∏ –∑–∞—Ä—è–¥ —ç–Ω–µ—Ä–≥–∏–∏ ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_4=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 5/24")}\n'
                                            f'–ö–æ–≥–¥–∞ —è —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω, —è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é'
                                            f' –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_5)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 4/24")}\n'
                                            f'–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –∫–∞–∫ –∏–º–µ–Ω–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é —Ü–µ–ª—å ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_5=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 6/24")}\n'
                                            f'–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ –∏–º–µ–Ω–Ω–æ'
                                            f' –Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Ü–µ–ª–∏',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_6)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    if data_2 == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 5/24")}\n'
                                               f'–ö–æ–≥–¥–∞ —è —Å–æ—Å—Ç–∞–≤–ª—è—é –ø–ª–∞–Ω, —è —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é'
                                               f' –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏',
                                               reply_markup=answers_keyboard
                                               )
        await Question.previous()
    else:
        await state.update_data(question_6=int(data_2))
        data = await state.get_data()
        average_number = (data["question_4"] + data["question_5"] + data["question_6"]) / 3
        await state.update_data(plan=average_number)
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —à–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 7/24")}\n'
                                            f'–Ø –º–æ–≥—É –±—ã—Å—Ç—Ä–æ –∏ —á–µ—Ç–∫–æ –Ω–∞–∑–≤–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—É—é –º–Ω–æ—é —Ü–µ–ª—å',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_7)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 6/24")}\n'
                                            f'–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ –∏–º–µ–Ω–Ω–æ'
                                            f'–Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Ü–µ–ª–∏',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_7=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —Å–µ–¥—å–º–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 8/24")}\n'
                                               f'–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–ª—å –º–µ–Ω—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –º–æ–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏',
                                               reply_markup=answers_keyboard
                                               )
        await Question.next()


@dp.callback_query_handler(state=Question.question_8)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 7/24")}\n'
                                            f'–ö–∞–∂–¥—ã–π –¥–µ–Ω—å —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ –∏–º–µ–Ω–Ω–æ'
                                            f'–Ω–∞–¥–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–∏–±–ª–∏–∑–∏—Ç—å—Å—è –∫ —Ü–µ–ª–∏',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_8=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –≤–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 9/24")}\n'
                                            f'–ú–æ—è —Ü–µ–ª—å —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π ',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_9)
async def save_first_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    if data_2 == 'back':
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 8/24")}\n'
                                            f'–ü–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —Ü–µ–ª—å –º–µ–Ω—è –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç –∏ —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –º–æ–∏–º–∏ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏ ',
                                            reply_markup=answers_keyboard
                                            )
        await state.finish()
    else:
        logger.info(f"{data_2} –±–∞–ª–ª –∑–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        await state.update_data(question_9=int(data_2))
        data = await state.get_data()
        average_number = (data["question_7"] + data["question_8"] + data["question_9"]) / 3
        await state.update_data(goal=average_number)
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 10/24")}\n'
                                            f'–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –Ω–∞ —á–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è '
                                            f'–≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å –≤ –º–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_10)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    logger.info(data)
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 9/24")}\n'
                                            f'–ú–æ—è —Ü–µ–ª—å —Å–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–µ–π ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_10=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –≤—Ç–æ—Ä–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 11/24")}\n'
                                            f'–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —è –ª–µ–≥–∫–æ –¥–µ—Ä–∂—É —Ñ–æ–∫—É—Å –∏ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—é—Å—å –Ω–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –¥–µ–ª–∞',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_11)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 10/24")}\n'
                                            f'–Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –Ω–∞ —á–µ–º –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å'
                                            f' –≤ –º–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_11=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 12/24")}\n'
                                            f'–í –∫–æ–Ω—Ü–µ –¥–Ω—è —è  —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ —Ü–µ–Ω–Ω–æ–≥–æ'
                                            f' —Å–¥–µ–ª–∞–ª –∑–∞ –¥–µ–Ω—å –∏ –∫–∞–∫ –ø–æ–¥–≤–∏–Ω—É–ª—Å—è –∫ —Ü–µ–ª–∏ ',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_12)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    if data_2 == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 11/24")}\n'
                                            f'–ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —è –ª–µ–≥–∫–æ –¥–µ—Ä–∂—É —Ñ–æ–∫—É—Å –∏ –Ω–µ –æ—Ç–≤–ª–µ–∫–∞—é—Å—å –Ω–∞ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ –¥–µ–ª–∞',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_12=int(data_2))
        data = await state.get_data()
        average_number = (data["question_10"] + data["question_11"] + data["question_12"]) / 3
        await state.update_data(stunt=average_number)
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 13/24")}\n'
                                            f'–Ø –ª–µ–≥–∫–æ –≤–Ω–µ–¥—Ä—è—é –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å ',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_13)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 12/24")}\n'
                                            f'–í –∫–æ–Ω—Ü–µ –¥–Ω—è —è —Ç–æ—á–Ω–æ –∑–Ω–∞—é, —á—Ç–æ —Ü–µ–Ω–Ω–æ–≥–æ'
                                            f'—Å–¥–µ–ª–∞–ª –∑–∞ –¥–µ–Ω—å –∏ –∫–∞–∫ –ø–æ–¥–≤–∏–Ω—É–ª—Å—è –∫ —Ü–µ–ª–∏',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_13=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –ø—è—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 14/24")}\n'
                                            f'–ú–Ω–µ –ª–µ–≥–∫–æ –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ'
                                            f' –¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ –∫ —Ü–µ–ª–∏ ',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_14)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 13/24")}\n'
                                            f'–Ø –ª–µ–≥–∫–æ –≤–Ω–µ–¥—Ä—è—é –ø—Ä–∏–≤—ã—á–∫–∏ –≤ —Å–≤–æ—é –∂–∏–∑–Ω—å',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_14=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —à–µ—Å—Ç–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 15/24")}\n'
                                            f'–Ø –¥–≤–∏–≥–∞—é—Å—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —à–∞–≥–∞–º–∏ –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏, –Ω–µ —Å–±–∏–≤–∞—è —Ä–∏—Ç–º –¥–≤–∏–∂–µ–Ω–∏—è',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_15)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    if data_2 == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 14/24")}\n'
                                            f'–ú–Ω–µ –ª–µ–≥–∫–æ –∏–∑–æ –¥–Ω—è –≤ –¥–µ–Ω—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ'
                                            f'–¥–µ–π—Å—Ç–≤–∏—è, –ø—Ä–∏–±–ª–∏–∂–∞—é—â–∏–µ –∫ —Ü–µ–ª–∏',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_15=int(data_2))
        data = await state.get_data()
        average_number = (data["question_13"] + data["question_14"] + data["question_15"]) / 3
        await state.update_data(discipline=average_number)
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ 15 –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 16/24")}\n'
                                            f'–Ø –≤–µ—Ä—é –≤ —Ç–æ, —á—Ç–æ —è –ø—Ä–∏–Ω–∏–º–∞—é –≤–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è ',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_16)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 15/24")}\n'
                                            f'–Ø –¥–≤–∏–≥–∞—é—Å—å –º–∞–ª–µ–Ω—å–∫–∏–º–∏ —à–∞–≥–∞–º–∏ –∫ –±–æ–ª—å—à–æ–π —Ü–µ–ª–∏, –Ω–µ —Å–±–∏–≤–∞—è —Ä–∏—Ç–º –¥–≤–∏–∂–µ–Ω–∏—è ',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_16=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –≤–æ—Å—å–º–æ–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 17/24")}\n'
                                            f'–Ø –±—ã—Å—Ç—Ä–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é —Ä–µ—à–µ–Ω–∏—è,'
                                            f'—Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –≤ —Å–≤–æ—ë–º –≤—ã–±–æ—Ä–µ ',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_17)
async def save_first_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.answer(f"{hbold('–í–æ–ø—Ä–æ—Å 16/24')}"
                                            "–Ø –≤–µ—Ä—é –≤ —Ç–æ–º, —á—Ç–æ —è –ø—Ä–∏–Ω–∏–º–∞—é –≤–µ—Ä–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è",
                                            reply_markup=answers_keyboard)
        await state.finish()
    else:
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å")
        await state.update_data(question_17=int(data))
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 18/24")}\n'
                                            f'–Ø –∑–Ω–∞—é, —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –¥–æ–±–∏—Ç—å—Å—è –∂–µ–ª–∞–µ–º–æ–≥–æ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏ ',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_18)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    logger.info(data_2)
    if data_2 == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 17/24")}\n'
                                            f'–Ø –±—ã—Å—Ç—Ä–æ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—é —Ä–µ—à–µ–Ω–∏—è,'
                                            f' —Ç–∞–∫ –∫–∞–∫ –Ω–µ —Å–æ–º–Ω–µ–≤–∞—é—Å—å –≤ —Å–≤–æ—ë–º –≤—ã–±–æ—Ä–µ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_18=int(data_2))
        data = await state.get_data()
        average_number = (data["question_16"] + data["question_17"] + data["question_18"]) / 3
        await state.update_data(confidence=average_number)
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ 18 –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 19/24")}\n'
                                            f'–Ø –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –∫ –º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º ',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_19)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 18/24")}\n'
                                            f'–Ø –∑–Ω–∞—é, —á—Ç–æ —Å–ø–æ—Å–æ–±–µ–Ω –¥–æ–±–∏—Ç—å—Å—è –∂–µ–ª–∞–µ–º–æ–≥–æ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ —Å—Ä–æ–∫–∏',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_19=int(data))
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —Ç—Ä–µ—Ç–∏–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 20/24")}\n'
                                            f'–í –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —è –º–æ–±–∏–ª–∏–∑—É—é—Å—å –∏ –ª–µ–≥–∫–æ —É–ª–∞–≤–ª–∏–≤–∞—é —Ç—Ä–µ–Ω–¥—ã ',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_20)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 19/24")}\n'
                                            f'–Ø –±—ã—Å—Ç—Ä–æ –∞–¥–∞–ø—Ç–∏—Ä—É—é—Å—å –∫ –º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        logger.info(f"{data} –±–∞–ª–ª –∑–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–æ–ø—Ä–æ—Å")
        await callback_query.message.edit_reply_markup()
        await state.update_data(question_20=int(data))
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 21/24")}\n'
                                            f'–Ø –ø—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏, –≥–æ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_21)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data_2 = callback_query.data
    if data_2 == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 20/24")}\n'
                                            f'–í –∫—Ä–∏–∑–∏—Å–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∞ —è –º–æ–±–∏–ª–∏–∑—É—é—Å—å –∏ –ª–µ–≥–∫–æ —É–ª–∞–≤–ª–∏–≤–∞—é —Ç—Ä–µ–Ω–¥—ã ',
                                            reply_markup=answers_keyboard)
        await Question.previous()
    else:
        await state.update_data(question_21=int(data_2))
        data = await state.get_data()
        average_number = (data["question_19"] + data["question_20"] + data["question_21"]) / 3
        await state.update_data(flexibility=average_number)
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 22/24")}\n'
                                            f'–Ø –ø–æ–ª—É—á–∞—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã',
                                            reply_markup=answers_keyboard)
        await Question.next()


@dp.callback_query_handler(state=Question.question_22)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 21/24")}\n'
                                            f'–Ø –ø—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ü–µ–ª–∏, –≥–æ—Ç–æ–≤ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_22=int(data))
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 23/24")}\n'
                                               f'–ö–æ–≥–¥–∞ —è —Ä–∞–±–æ—Ç–∞—é, —è –Ω–µ –∑–∞–º–µ—á–∞—é —Ö–æ–¥ –≤—Ä–µ–º–µ–Ω–∏',
                                               reply_markup=answers_keyboard
                                               )
        await Question.next()


@dp.callback_query_handler(state=Question.question_23)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    data = callback_query.data
    if data == 'back':
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 22/24")}\n'
                                            f'–Ø –ø–æ–ª—É—á–∞—é —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞ –º–æ–µ–π —Ä–∞–±–æ—Ç—ã',
                                            reply_markup=answers_keyboard
                                            )
        await Question.previous()
    else:
        await state.update_data(question_23=int(data))
        await callback_query.message.edit_reply_markup()
        await callback_query.message.answer(f'{hbold("–í–æ–ø—Ä–æ—Å 24/24")}\n'
                                            f'–Ø —É–≤–ª–µ—á—ë–Ω–Ω–æ –∏–∑—É—á–∞—é –Ω–æ–≤–æ–µ –ø–æ –º–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π —Ç–µ–º–µ',
                                            reply_markup=answers_keyboard
                                            )
        await Question.next()


@dp.callback_query_handler(state=Question.question_24)
async def save_second_shore(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    data_2 = callback_query.data
    await state.update_data(question_24=int(data_2))
    data = await state.get_data()
    average_number = (data["question_22"] + data["question_23"] + data["question_24"]) / 3
    await state.update_data(interest=average_number)
    user_data = await state.get_data()
    interest = user_data["interest"]  # –∏–Ω—Ç–µ—Ä–µ—Å
    flexibility = user_data["flexibility"]  # –≥–∏–±–∫–æ—Å—Ç—å
    confidence = user_data["confidence"]  # —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å
    discipline = user_data["discipline"]  # –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞
    stunt = user_data["stunt"]  # —Ñ–æ–∫—É—Å
    goal = user_data["goal"]  # —Ü–µ–ª—å
    plan = user_data["plan"]  # –ø–ª–∞–Ω
    environment = user_data["environment"]  # –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    logger.info(f'{interest} {flexibility} {confidence} {discipline} {stunt} {goal} {plan} {environment}')
    pdf_num = randint(100, 1000000)

    logger.info(pdf_num)

    forming_test_result_pdf(
        pdf_num=pdf_num,
        interest=interest,
        flexibility=flexibility,
        confidence=confidence,
        discipline=discipline,
        stunt=stunt,
        goal=goal,
        plan=plan,
        environment=environment,
    )
    user_id = callback_query.from_user.id

    await update_question_answer(
        quest_1=float(interest),
        quest_2=float(flexibility),
        quest_3=float(confidence),
        quest_4=float(discipline),
        quest_5=float(stunt),
        quest_6=float(goal),
        quest_7=float(plan),
        quest_8=float(environment),
        user_id=user_id,
    )

    await callback_query.message.answer('–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ–º —Ç–µ—Å—Ç–∞!\n'
                                        '–Ø —É–≤–∞–∂–∞—é –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–≤–æ–¥—è—Ç –¥–µ–ª–æ –¥–æ –∫–æ–Ω—Ü–∞ ü§ù\n\n'
                                        '–í –æ—Ç—á–µ—Ç–µ –ø–æ —Ç–≤–æ–µ–º—É —Ç–µ—Å—Ç—É —Ç—ã —É–≤–∏–¥–∏—à—å –∑–æ–Ω—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è.\n'
                                        '–û–±—Ä–∞—Ç–∏ –Ω–∞ –Ω–∏—Ö –≤–Ω–∏–º–∞–Ω–∏–µ, —ç—Ç–∏ —Ñ–∞–∫—Ç–æ—Ä—ã —Ç–æ—Ä–º–æ–∑—è—Ç —Ç–≤–æ–π —Ä–æ—Å—Ç üìå')

    await callback_query.message.answer_document(open(f'{pdf_num}.pdf', 'rb'))
    os.remove(f'{pdf_num}.pdf')

    await callback_query.message.answer('–•–æ—á–µ—à—å –±—ã—Å—Ç—Ä–µ–µ –¥–≤–∏–≥–∞—Ç—å—Å—è –∫ —Ü–µ–ª—è–º, –ø–æ–ª—É—á–∞—è –¥—Ä–∞–π–≤ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–∞? ü§©\n\n'
                                        '–ó–∞–ø–∏—Å—ã–≤–∞–π—Å—è –Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n\n'
                                        '–°–æ—Ñ–∏—è –ø–æ–º–æ–∂–µ—Ç –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∫—Ä–∞—Ç—á–∞–π—à–∏–π –ø—É—Ç—å –∫ —Ü–µ–ª–∏ –∏ –∑–∞–∂–µ—á—å—Å—è –ª—é–±–æ–≤—å—é –∫ —Å–≤–æ–µ–º—É –¥–µ–ª—É :)',
                                        reply_markup=keyboards.sign_up_keyboard)

    await state.finish()


@dp.callback_query_handler(text='repost')
async def repost_bot(callback_query: types.CallbackQuery):
    await callback_query.message.answer('–Ø —Ä–∞–¥, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å üå±\n\n'
                                        '–ö–æ–ø–∏—Ä—É–π —Å—Å—ã–ª–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π –¥—Ä—É–∑—å—è–º / –∫–æ–ª–ª–µ–≥–∞–º:')
    await callback_query.message.answer('https://t.me/BottecQuestion_bot')


@dp.message_handler(commands=['admin'])
async def admin_start(message: types.Message):
    user_id = message.from_user.id
    if user_id == 688136452 or user_id == 694833645 or user_id == 5217389680:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –ø—É–Ω–∫—Ç –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:', reply_markup=keyboards.new_users_keyboard)


@dp.callback_query_handler(text="users_count")
async def users_count_info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup()
    count = User.select().count()
    await callback_query.message.answer(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {count}")


@dp.callback_query_handler(text="new_users")
async def chose_time(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ–∫ –≤—Ä–µ–º–µ–Ω–∏:", reply_markup=keyboards.stat_keyboard)


@dp.callback_query_handler(text="one_day")
async def one_day_check_info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup()
    today = datetime.datetime.today().date()
    user_info = User.select().where(User.registration_date == today)
    for user in user_info:
        await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                                            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date}\n"
                                            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

    await callback_query.message.answer('–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –¥–µ–Ω—å,'
                                        ' –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å')


@dp.callback_query_handler(text="one_week")
async def one_week_check_info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup()
    today = datetime.datetime.today().date()
    week_ago = today - datetime.timedelta(days=7)
    logger.info(f"{week_ago}")
    user_info = User.select().where(User.registration_date <= today, User.registration_date >= week_ago)
    for user in user_info:
        await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                                            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date}\n"
                                            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

    await callback_query.message.answer('–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –Ω–µ–¥–µ–ª—é,'
                                        ' –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å')


@dp.callback_query_handler(text="one_mouth")
async def one_mouth_check_info(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup()
    today = datetime.datetime.today().date()
    mouth_ago = today - datetime.timedelta(days=30)
    logger.info(f"{mouth_ago}")
    user_info = User.select().where(User.registration_date <= today, User.registration_date >= mouth_ago)
    for user in user_info:
        await callback_query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name}\n"
                                            f"–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user.registration_date}\n"
                                            f"–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.username}")

    await callback_query.message.answer('–í—Å–µ –Ω–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –∑–∞ –º–µ—Å—è—Ü,'
                                        ' –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, –∑–Ω–∞—á–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –ø—Ä–∏–±–∞–≤–∏–ª–æ—Å—å')


class WaitePostInformation(StatesGroup):
    waite_description = State()
    waite_image_answer = State()
    waite_image = State()


@dp.callback_query_handler(text='add_post')
async def add_post(callback_query: types.CallbackQuery):
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É —Ç–µ–∫—Å—Ç:', reply_markup=keyboards.cancel_keyboard)
    await WaitePostInformation.waite_description.set()


@dp.message_handler(state=WaitePostInformation.waite_description)
async def save_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é –∫ –ø–æ—Å—Ç—É?", reply_markup=keyboards.yes_or_no)
    await WaitePostInformation.waite_image_answer.set()


@dp.callback_query_handler(state=WaitePostInformation.waite_image_answer)
async def waite_image_answer(callback_query: types.CallbackQuery, state: FSMContext):
    if callback_query.data == "cancel":
        await state.finish()
        await callback_query.message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ!")
    await callback_query.message.edit_reply_markup()
    user_data = await state.get_data()
    image_answer = callback_query.data
    if image_answer == "yes":
        await callback_query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:", reply_markup=keyboards.cancel_keyboard)
        await WaitePostInformation.waite_image.set()
    elif callback_query.data == "no":
        users = User.select()
        description = user_data["description"]
        for user in users:
            await bot.send_message(user.user_id, f"{description}")
        await state.finish()


@dp.message_handler(state=WaitePostInformation.waite_image, content_types=types.ContentTypes.PHOTO)
async def save_image_and_post(message: types.Message, state: FSMContext):
    image = message.photo[0].file_id
    user_data = await state.get_data()
    users = User.select()
    description = user_data["description"]
    for user in users:
        try:
            await bot.send_photo(user.user_id, image, f"{description}")
        except Exception as exc:
            logger.info(f'{exc} -- {user.user_id} {user.username} - —ç—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞')
    await state.finish()


@dp.callback_query_handler(text="cancel", state="*")
async def cancel_btn(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_reply_markup()
    await callback_query.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ!')
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

